#!/bin/bash

BASE_COLLECTION_PATH="${BASE_COLLECTION_PATH:-must-gather}"
PROFILING_NODE_LOG_PATH="${BASE_COLLECTION_PATH}/pprof"
PROFILING_NODE_KUBELET_LOG_PATH="${PROFILING_NODE_LOG_PATH}/kubelet"
PROFILING_NODE_CRIO_LOG_PATH="${PROFILING_NODE_LOG_PATH}/crio"

PROFILING_NODE_APISERVER="kubernetes.default.svc"
PROFILING_NODE_SECONDS="${PROFILING_NODE_SECONDS:-30}"
PROFILING_NODE_TARGET="${PROFILING_NODE_TARGET:-ALL}"

PROFILING_NODE_IMAGE="${PROFILING_NODE_IMAGE:-"registry.redhat.io/rhel8/support-tools"}"

# _gather_profiling_node_node_exists $NODE
# returns "true" if $NODE is found among the cluster nodes, "false" otherwise.
_gather_profiling_node_node_exists() {
    local node="$1"

    oc get node "$node" > /dev/null 2>&1
    return "$?"
}

# _gather_profiling_node_is_apiserver_available
# returns "true" if the kubernetes apiserver can be reached, returns "false" otherwise.
_gather_profiling_node_is_apiserver_available() {
    oc get --raw https://${PROFILING_NODE_APISERVER}/api > /dev/null 2>&1
    return "$?"
}

_gather_profiling_node_start_crio_collection_pod() {
    local node="$1"
    local pod_name="$2"

    cat << EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: ${pod_name}
  labels:
    name: gather-profiling-crio
spec:
  restartPolicy: Never
  nodeName: ${node}
  containers:
  - name: crio-prof-expose
    image: ${PROFILING_NODE_IMAGE}
    command: ["/bin/bash", "-c", "trap : TERM INT; sleep infinity & wait"]
    volumeMounts:
    - mountPath: /tmp/pprof
      name: pprof-data
  initContainers:
  - name: crio-prof-generate
    image: ${PROFILING_NODE_IMAGE}
    command: ["/bin/bash", "-c"]
    args:
      - curl --unix-socket /run/crio/crio.sock -o /tmp/pprof/${node}_heap.out http://localhost/debug/pprof/heap;
        curl --unix-socket /run/crio/crio.sock -o /tmp/pprof/${node}_prof.out http://localhost/debug/pprof/profile?seconds=${PROFILING_NODE_SECONDS};
    securityContext:
      runAsUser: 0
      privileged: True
    volumeMounts:
    - mountPath: /run/crio/crio.sock
      name: crio-socket
    - mountPath: /tmp/pprof
      name: pprof-data
  volumes:
  - name: crio-socket
    hostPath:
      path: /run/crio/crio.sock
  - name: pprof-data
    emptyDir: {}
EOF
}

_gather_profiling_node_collect_crio_data() {
    local node="$1"
    local pod_name="pprof.${node}"
    local extract_timeout=$((PROFILING_NODE_SECONDS+300))

    _gather_profiling_node_start_crio_collection_pod "$node" "$pod_name"
    if oc wait --for=condition=Ready pod/${pod_name} --timeout=${extract_timeout}s; then
        oc cp -c crio-prof-expose "${pod_name}:/tmp/pprof/" "$PROFILING_NODE_CRIO_LOG_PATH"
        oc delete pod "$pod_name"
    else
        oc delete pod --grace-period=0 --force "$pod_name"
    fi
}

_gather_profiling_node_collect_kubelet_data() {
    local node="$1"
    local out_kub_base="${PROFILING_NODE_KUBELET_LOG_PATH}/${node}"
    local out_kub_heap="${out_kub_base}_heap.out"
    local out_kub_prof="${out_kub_base}_prof.out"
    local url_base="https://${PROFILING_NODE_APISERVER}/api/v1/nodes/${node}/proxy/debug/pprof"

    oc get --raw "${url_base}/profile?seconds=${PROFILING_NODE_SECONDS}" > "$out_kub_prof"
    oc get --raw "${url_base}/heap" > "$out_kub_heap"
}

_gather_profiling_node_collect_data_loop() {
    local pids=()
    local node

    mkdir -p "$PROFILING_NODE_KUBELET_LOG_PATH" "$PROFILING_NODE_CRIO_LOG_PATH"
    for node in ${NODES}; do
        if _gather_profiling_node_node_exists "$node"; then
            if [ "$DO_PROF_CRIO" = true ]; then
                echo "INFO: start crio profiling task on node ${node}"
                _gather_profiling_node_collect_crio_data "$node" & pids+=($!)
            fi
            if [ "$DO_PROF_KUBELET" = true ]; then
                echo "INFO: start kubelet profiling task on node ${node}"
                _gather_profiling_node_collect_kubelet_data "$node" & pids+=($!)
            fi
        else
            echo "ERROR: node ${node} not found in the cluster"
        fi
    done

    [ -z "$pids" ] && return
    echo "INFO: wait for crio/kubelet profiling tasks"
    wait ${pids[@]}
}

NODES="${@}"
if [ -z "$NODES" ]; then
    echo -e "\nWARNING: since no nodes have been specified for the profiling task, data will\n"\
            "be collected on ALL the nodes in the cluster. This may take quite some time.\n"
    NODES="$(oc get nodes -o jsonpath='{.items[?(@.kind=="Node")].metadata.name}')"
fi

DO_PROF_CRIO=true
DO_PROF_KUBELET=true

case "$PROFILING_NODE_TARGET" in
    all | ALL)    ;;
    crio | CRIO | CRI-O)    DO_PROF_KUBELET=false ;;
    kubelet | KUBELET)      DO_PROF_CRIO=false ;;
    *) echo -e "\nWARNING: PROFILING_NODE_TARGET set to unknown value = [$PROFILING_NODE_TARGET].\n"\
               "allowed values are: 'all' (default), 'crio' or 'kubelet'.\n"
               "Running with 'all'"
esac

echo "INFO: GATHER NODE PROFILING DATA [${PROFILING_NODE_SECONDS}s]"
if _gather_profiling_node_is_apiserver_available; then
    _gather_profiling_node_collect_data_loop
else
    echo "ERROR: failed connecting to the kubernetes apiserver"
fi
echo "INFO: gather node profiling data completed"
